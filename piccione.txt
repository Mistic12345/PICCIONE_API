<html>
        <h2>piccione</h2>
            <table id="piccione">
                <thead></thead>
                <tbody></tbody>
            </table>
</html>

<script>
async function fetchAndDisplay(url, id) {
  const data = await (await fetch(url)).json();
  const t = document.getElementById(id);
  const h = Object.keys(data[0]);
  t.innerHTML = '<thead><tr>' + h.map(k => '<th>' + k + '</th>').join('') + '</tr></thead>' +
                '<tbody>' + data.map(r => '<tr>' + h.map(k => '<td>' + r[k] + '</td>').join('') + '</tr>').join('') + '</tbody>';
}
 
fetchAndDisplay('/get-piccione', 'piccione');
</script>
-----------------------------------------------------------------------------------
@GeneratedValue(strategy = GenerationType.IDENTITY)


public class VisitaPiccioneProprietarioDto {
    public String diagnosi;

    public VisitaPiccioneProprietarioDto(String diagnosi) {
        this.diagnosi = diagnosi;
    }
}

    public List<VisitaPiccioneProprietarioDto> getVisitePiccioneProprietario() {
        return visitaRepo.getVisiteConPiccioniProprietari();
    }



public interface VisitaPiccioneProprietarioRepository extends JpaRepository<VisitaVeterinaria, Integer> {

    @Query("SELECT new com.test.FelineManager.dtos.VisitaPiccioneProprietarioDto(" +
           "v.diagnosi, g.nome) " +
           "FROM VisitaPiccione v " +
           "LEFT JOIN v.proprietario p ")
    List<VisitaPiccioneProprietarioDto> getVisiteConPiccioniEProprietari();

}
